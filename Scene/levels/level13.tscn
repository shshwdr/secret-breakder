[gd_scene load_steps=14 format=2]

[ext_resource path="res://Scene/levels/levelScene.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scene/Object/bricks/Brick_lurch.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scene/Object/bricks/Brick_heal.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scene/Object/bricks/Brick_monster.tscn" type="PackedScene" id=4]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float changeColorRatio;

void fragment() {
	bool condition = UV.y<changeColorRatio;
	if (condition){
    	COLOR = texture(TEXTURE, UV);
		//COLOR.r = 1.0;
		COLOR.g = 0.0;
		COLOR.b =0.0;
	}else{
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 3 )
shader_param/changeColorRatio = 0.0

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform float changeColorRatio;

void fragment() {
	bool condition = UV.y<changeColorRatio;
	if (condition){
    	COLOR = texture(TEXTURE, UV);
		//COLOR.r = 1.0;
		COLOR.g = 0.0;
		COLOR.b =0.0;
	}else{
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/changeColorRatio = 0.0

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform float changeColorRatio;

void fragment() {
	bool condition = UV.y<changeColorRatio;
	if (condition){
    	COLOR = texture(TEXTURE, UV);
		//COLOR.r = 1.0;
		COLOR.g = 0.0;
		COLOR.b =0.0;
	}else{
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 7 )
shader_param/changeColorRatio = 0.0

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 7 )
shader_param/changeColorRatio = 0.0

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;

uniform float changeColorRatio;

void fragment() {
	bool condition = UV.y<changeColorRatio;
	if (condition){
    	COLOR = texture(TEXTURE, UV);
		//COLOR.r = 1.0;
		COLOR.g = 0.0;
		COLOR.b =0.0;
	}else{
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=11]
resource_local_to_scene = true
shader = SubResource( 10 )
shader_param/changeColorRatio = 0.0

[node name="level" instance=ExtResource( 1 )]
current_level = 13

[node name="Brick_heal2" parent="bricks" index="0" instance=ExtResource( 3 )]
material = SubResource( 4 )
position = Vector2( 224, 0 )

[node name="Brick_heal3" parent="bricks" index="1" instance=ExtResource( 3 )]
material = SubResource( 4 )
position = Vector2( 64, 0 )

[node name="Brick_target" parent="bricks" index="2"]
material = SubResource( 6 )

[node name="Brick_monster" parent="bricks" index="3" instance=ExtResource( 4 )]
material = SubResource( 8 )
position = Vector2( 96, 0 )

[node name="Brick_monster2" parent="bricks" index="4" instance=ExtResource( 4 )]
material = SubResource( 9 )
position = Vector2( 160, 64 )

[node name="Brick_monster3" parent="bricks" index="5" instance=ExtResource( 4 )]
material = SubResource( 9 )
position = Vector2( 128, 32 )

[node name="Brick_monster6" parent="bricks" index="6" instance=ExtResource( 4 )]
material = SubResource( 9 )
position = Vector2( 192, 32 )

[node name="Brick_monster4" parent="bricks" index="7" instance=ExtResource( 4 )]
material = SubResource( 9 )
position = Vector2( 192, 0 )

[node name="Brick_monster5" parent="bricks" index="8" instance=ExtResource( 4 )]
material = SubResource( 9 )
position = Vector2( 160, 32 )

[node name="Brick_lurch" parent="bricks" index="9" groups=[
"brick",
] instance=ExtResource( 2 )]
material = SubResource( 11 )
position = Vector2( 128, 0 )
